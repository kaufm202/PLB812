install.packages("BiocManager")
a = 1
a
install.packages("Rtools")
BiocManager::install("DESeq2")
library(BiocManager)
vignette(DESeq2)
vignette('DESeq2')
install.packages("ggplot2")
#Lets download this later
BiocManager::install("topGO")
library(topGO)
vignette('topGO')
BiocManager::install("GO.db")
library('GO/db')
library('GO.db')
vignette('GO.db')
vignette(GO.db)
library(GO.db)
vignette('GO.db')
library(RColorBrewer)
#Plot sample heatmap
library(pheatmap)
getwd()
#List files in directory
mypath <- "C:/Users/idkau/PLB812/lab_assignments/assignment_5/counts/stranded"
setwd(mypath)
sampleFiles <- list.files('.')
#Create sampleTable from the file names
sampleTable <- data.frame(sampleName = sub("_count.txt","",sampleFiles),
fileName = sampleFiles,
genotype = c('Cvi0', 'Cvi0', 'Cvi0', 'Cvi0', 'Cvi0', 'Cvi0'),
condition = c('control', 'control', 'control', 'drought', 'drought', 'control'))
#Set the condition column to factor
sampleTable$condition <- factor(sampleTable$condition)
#Load DESeq2
library(DESeq2)
#Create the DESeq2 object from the HTSeqCount tables
dds <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = '.',
design= ~ condition)
#Change factor levels so WT is considered the reference genotype
dds$condition <- relevel(dds$condition, ref = "control")
#Show the dds object
dds
#Prefilter
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Show the dds object
dds
#Estimate Size Factor - library size
dds <- estimateSizeFactors(dds)
#Show the library size adjustment
dds$sizeFactor
#Estimate the dispersion
#This estimates the dispersion per gene
dds <- estimateDispersions(dds)
#Plot out the dispersions
plotDispEsts(dds)
#Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
#Calculate distance between samples
sampleDists <- dist(t(assay(vsd)))
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(colnames(vsd), vsd$type)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#PCA of the samples
plotPCA(vsd, intgroup=c("condition"))
#Call DE genes using the Wald Test
dds <- nbinomWaldTest(dds)
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("condition","control","drought")))
head(resultsTable)
#Show how many genes padj < 0.05
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
#Genes with 2-fold change
nrow(na.omit(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1,]))
#Volcano Plot
plotMA(results(dds, contrast=c("condition","control","drought")), ylim=c(-2,2))
#Volcano Plot
plotMA(results(dds, contrast=c("condition","control","drought")), ylim=c(-2,2))
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"condition","control","drought",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 & !is.na(res$padj) | res$padj < 0.05 & res$log2FC <= -1 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
