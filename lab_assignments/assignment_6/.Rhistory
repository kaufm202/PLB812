goTerms[0:1]
goTerms[0:100]
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.1 & !is.na(res$padj) | res$padj < 0.01 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.1 & !is.na(res$padj) | res$padj < 0.1 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.2 & !is.na(res$padj) | res$padj < 0.1 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.25 & !is.na(res$padj) | res$padj < 0.25 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
names(upGenes) <- res$id
#Format higher expressed genes
upGenes <- factor(as.integer(res$id %in% res[res$padj < 0.05 & res$log2FC >= 1,]$id))
names(upGenes) <- res$id
table(upGenes)
#Format higher expressed genes
upGenes <- factor(as.integer(res$id %in% res[res$padj < 0.1 & res$log2FC >= 1,]$id))
names(upGenes) <- res$id
table(upGenes)
#Format higher expressed genes
upGenes <- factor(as.integer(res$id %in% res[res$padj < 0.1,]$id))
names(upGenes) <- res$id
table(upGenes)
05
#Format higher expressed genes
upGenes <- factor(as.integer(res$id %in% res[res$padj < 0.05 & res$log2FC >= 1,]$id))
names(upGenes) <- res$id
table(upGenes)
head(upGenes)
upGenes
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$fdr <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$fdr <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$fdr <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGo(upGenes, goTerms, 10, filename='goterms', returndata=TRUE)
topGO <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$fdr <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$fdr <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$fdr <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGo(upGenes, goTerms, 10, filename='goterms', returndata=TRUE)
topGo
topGO <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$fdr <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$fdr <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$fdr <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$fdr <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$fdr <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$fdr <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGo_analysis(upGenes, goTerms, 10, filename='goterms', returndata=TRUE)
topGo_analysis(genelist=upGenes, goTerms=goTerms, nodesize=10, filename='goterms', returndata=TRUE)
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$fdr <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$fdr <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$fdr <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGo_analysis(genelist=upGenes, goTerms=goTerms, nodesize=10, filename='goterms', returndata=TRUE)
topGO_analysis()
topGO_analysis(upGenes, goTerms, 10)
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output')
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='.')
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='')
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$Fisher <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$Fisher <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$Fisher <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
upGenes <- factor(as.integer(res$id %in% res[res$p < 0.05,]$id))
upGenes
table(upGenes)
head(res)
upGenes <- factor(as.integer(res$id %in% res[res$pval < 0.05,]$id))
table(upGenes)
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
head(goTerms)
names(upGenes) <- res$id
head(upGenes)
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$Fisher <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$Fisher <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=Fisher))
write.csv(CCgenTable[CCgenTable$Fisher <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
topGO_analysis(upGenes, goTerms, 10, filename='goterm_output', path='', returnData=TRUE)
GOdotplot
table(res$sig)
#Make new results table
res <- makeResultsTable(dds,"condition","control","drought",lfcThreshold=0,filter=TRUE)
head(re)
head(res)
write.table(res, file="../deseq2_results.tsv", sep='\t')
head(res)
table(res$sig)
#Read in our genes
res <- read.table("../assignment_5-v2/deseq2_results.tsv",header=TRUE,sep="\t")
head(res)
table(res$sig)
#Make new results table
res <- makeResultsTable(dds,"condition","control","drought",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
#res$sig <- ifelse(res$pval < 0.25 & !is.na(res$padj) | res$padj < 0.25 & !is.na(res$padj) , "DE", "notDE")
#head(res)
#table(res$sig)
write.table(res, file="../deseq2_results.tsv", sep='\t')
#Read in our genes
res <- read.table("../assignment_5-v2/deseq2_results.tsv",header=TRUE,sep="\t")
head(res)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$pval < 0.05 & !is.na(res$padj) | res$pval < 0.05 & !is.na(res$padj) , "DE", "notDE")
#Make new results table
res <- makeResultsTable(dds,"condition","control","drought",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$pval < 0.05 & !is.na(res$padj) | res$pval < 0.05 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
write.table(res, file="../deseq2_results.tsv", sep='\t')
#Read in our genes
res <- read.table("../assignment_5-v2/deseq2_results.tsv",header=TRUE,sep="\t")
head(res)
table(res$sig)
head(res)
table(res$sig)
#Make new results table
res <- makeResultsTable(dds,"condition","control","drought",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$pval < 0.05 & !is.na(res$padj) | res$pval < 0.05 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
write.table(res, file="../deseq2_results.tsv", sep='\t')
#Read in our genes
res <- read.table("../assignment_5-v2/deseq2_results.tsv",header=TRUE,sep="\t")
head(res)
table(res$sig)
write.table(res, file="../deseq2_results.tsv", sep='\t')
getwd()
#Read in our genes
res <- read.table("../assignment_5-v2/deseq2_results.tsv",header=TRUE,sep="\t")
head(res)
table(res$sig)
gene_names <- c()
for (gene_id in res$id) {
name <- gsub(".Araport11.447", "", gene_id)
gene_names <- append(gene_names, name)
}
res$id <- gene_names
#Read in topGO terms
goTerms <- readMappings(file="Athaliana_topGO.tsv")
head(goTerms)
#Get higher and lower expressed genes
upGenes <- factor(as.integer(res$id %in% res[res$pval < 0.05 & res$log2FC >= 0,]$id))
names(upGenes) <- res$id
head(upGenes)
table(upGenes)
downGenes <- factor(as.integer(res$id %in% res[res$pval < 0.05 & res$log2FC >= 0,]$id))
names(downGenes) <- res$id
head(downGenes)
table(downGenes)
downGenes <- factor(as.integer(res$id %in% res[res$pval < 0.05 & res$log2FC <= 0,]$id))
names(downGenes) <- res$id
head(downGenes)
table(downGenes)
topGO_analysis(upGenes, goTerms, 10, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="BH")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="BH")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="BH")
write.csv(BPgenTable[BPgenTable$Fisher <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$Fisher <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$Fisher <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGO_analysis(upGenes, goTerms, 10, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(downGenes, goTerms, 10, filename='down_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(upGenes, goTerms, 5, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(upGenes, goTerms, nodesize=5, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(upGenes, goTerms, nodeSize=5, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(downGenes, goTerms, nodeSize=5, filename='down_goterm_output', path='goterm_output/', returnData=TRUE)
#Function for running topGO on a list of genes
#This run each of the above analyses for a gene list and output a table and plots
topGO_analysis <- function(genelist,goTerms,nodeSize,fdr=0.05,filename,path="",returnData=FALSE){
require(topGO)
require(GO.db)
ifelse(!dir.exists(path),dir.create(path), FALSE)
BP <- new("topGOdata",description="Biological Process",ontology="BP",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
MF <- new("topGOdata",description="Molecular Function",ontology="MF",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
CC <- new("topGOdata",description="Cellular Compartment",ontology="CC",
allGenes=genelist,annot=annFUN.gene2GO,nodeSize=nodeSize,gene2GO=goTerms)
FisherBP <- runTest(BP,algorithm="parentchild",statistic="fisher")
FisherMF <- runTest(MF,algorithm="parentchild",statistic="fisher")
FisherCC <- runTest(CC,algorithm="parentchild",statistic="fisher")
BPgenTable <- GenTable(BP,Fisher=FisherBP,ranksOf="Fisher",
topNodes=length(score(FisherBP)))
BPgenTable$Fisher<-gsub("< ","",BPgenTable$Fisher)
MFgenTable <- GenTable(MF,Fisher=FisherMF,ranksOf="Fisher",
topNodes=length(score(FisherMF)))
MFgenTable$Fisher<-gsub("< ","",MFgenTable$Fisher)
CCgenTable <- GenTable(CC,Fisher=FisherCC,ranksOf="Fisher",
topNodes=length(score(FisherCC)))
CCgenTable$Fisher<-gsub("< ","",CCgenTable$Fisher)
BPgenTable$fdr <- p.adjust(BPgenTable$Fisher,method="none")
MFgenTable$fdr <- p.adjust(MFgenTable$Fisher,method="none")
CCgenTable$fdr <- p.adjust(CCgenTable$Fisher,method="none")
write.csv(BPgenTable[BPgenTable$Fisher <= fdr,],paste(path,filename,"_BP.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_BP.pdf",sep=""),plot=GOdotplot(BPgenTable,fdr=fdr))
write.csv(MFgenTable[MFgenTable$Fisher <= fdr,],paste(path,filename,"_MF.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_MF.pdf",sep=""),plot=GOdotplot(MFgenTable,fdr=fdr))
write.csv(CCgenTable[CCgenTable$Fisher <= fdr,],paste(path,filename,"_CC.csv",sep=""),
row.names=FALSE,quote=FALSE)
ggsave(paste(path,filename,"_CC.pdf",sep=""),plot=GOdotplot(CCgenTable,fdr=fdr))
if(returnData){
return(list(BP=BPgenTable,MF=MFgenTable,CC=CCgenTable))
}
}
topGO_analysis(upGenes, goTerms, nodeSize=5, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(downGenes, goTerms, nodeSize=5, filename='down_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(upGenes, goTerms, nodeSize=5, filename='up_goterm_output', path='goterm_output/', returnData=TRUE)
topGO_analysis(downGenes, goTerms, nodeSize=5, filename='down_goterm_output', path='goterm_output/', returnData=TRUE)
